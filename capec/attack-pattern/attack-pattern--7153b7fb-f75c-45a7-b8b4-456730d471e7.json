{
    "type": "bundle",
    "id": "bundle--5a0c98d4-1d78-4268-afdc-55c47732b9d9",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--7153b7fb-f75c-45a7-b8b4-456730d471e7",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2018-03-06T17:19:03.407Z",
            "modified": "2018-03-06T17:19:03.407Z",
            "name": "SQL Injection",
            "description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended.\nSQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/66.html",
                    "external_id": "CAPEC-66"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/89.html",
                    "external_id": "CWE-89"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/390.html",
                    "external_id": "CWE-390"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/713.html",
                    "external_id": "CWE-713"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/707.html",
                    "external_id": "CWE-707"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Standard",
            "x_capec_consequences": {
                "Run Arbitrary Code": "Execute unauthorized code or commands"
            },
            "x_capec_example_instances": [
                "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a blacklist approach to input validation. However, because of improper blacklisting, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database."
            ],
            "x_capec_likelihood_of_attack": "Very High",
            "x_capec_prerequisites": [
                "SQL queries used by the application to store, retrieve or modify data.",
                "User-controllable input that is not properly validated by the application as part of SQL queries."
            ],
            "x_capec_skills_required": {
                "It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required.": "Low"
            },
            "x_capec_typical_severity": "High",
            "x_resources_required": "None: No specialized resources are required to execute this type of attack."
        }
    ]
}