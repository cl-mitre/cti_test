{
    "type": "bundle",
    "id": "bundle--bfdcf08b-7359-46cf-988a-ae2892c7d81e",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--ee056479-88a3-414a-9f4f-b9e01ae5f598",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2018-03-06T17:19:02.993Z",
            "modified": "2018-03-06T17:19:02.993Z",
            "name": "DOM-Based XSS",
            "description": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/588.html",
                    "external_id": "CAPEC-588"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/79.html",
                    "external_id": "CWE-79"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_consequences": {
                "A successful DOM-based XSS attack can allow an adversary to tamper with application data.": "Modify memory",
                "A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.": "Read application data",
                "A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.": "Execute unauthorized code or commands",
                "A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.": "Gain privileges / assume identity"
            },
            "x_capec_example_instances": [
                "Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string.\n\thttp://my.site.com/aform.html?mode=full\nThe application\u2019s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call.\n\t<script>document.write(\"<p>Mode is: \" + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + \"</p>\");</script>\nNotice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim\u2019s browser:\n\thttp://my.site.com/aform.html?mode=<script>alert('hi');</script>",
                "In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used.\n\thttp://my.site.com/aform.html#mode=<script>alert('hi')</script>\nIn this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code."
            ],
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "An application that leverages a client-side web browser with scripting enabled.",
                "An application that manipulates the DOM via client-side scripting.",
                "An application that failS to adequately sanitize or encode untrusted input."
            ],
            "x_capec_skills_required": {
                "Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.": "Medium"
            },
            "x_capec_typical_severity": "Very High",
            "x_resources_required": "None: No specialized resources are required to execute this type of attack."
        }
    ]
}