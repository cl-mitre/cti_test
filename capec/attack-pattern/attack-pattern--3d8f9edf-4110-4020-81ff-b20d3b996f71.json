{
    "type": "bundle",
    "id": "bundle--b80e652e-07ab-448c-b5ae-c2220e4dde88",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--3d8f9edf-4110-4020-81ff-b20d3b996f71",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2018-03-06T17:19:00.752Z",
            "modified": "2018-03-06T17:19:00.752Z",
            "name": "Path Traversal",
            "description": "An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/126.html",
                    "external_id": "CAPEC-126"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/22.html",
                    "external_id": "CWE-22"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Standard",
            "x_capec_alternate_terms": [
                "Directory Traversal"
            ],
            "x_capec_consequences": {
                "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.": "Execute unauthorized code or commands",
                "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.": "DoS: crash / exit / restart",
                "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.": "Modify files or directories",
                "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.": "Read files or directories"
            },
            "x_capec_example_instances": [
                "An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request\n\thttp://example/../../../../../etc/passwd\nFrom an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system."
            ],
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The attacker must be able to control the path that is requested of the target.",
                "The target must fail to adequately sanitize incoming paths"
            ],
            "x_capec_skills_required": {
                "Customizing attacks to bypass non trivial filters in the application.": "Medium",
                "Simple command line attacks or to inject the malicious payload in a web page.": "Low"
            },
            "x_capec_typical_severity": "Very High",
            "x_resources_required": "The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application."
        }
    ]
}