{
    "type": "bundle",
    "id": "bundle--fb8a4e22-9efd-44c2-b352-a7a63506470c",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--8d80cdc4-76e5-4cd6-8ba6-dc5349046019",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2018-03-06T17:19:01.230Z",
            "modified": "2018-03-06T17:19:01.230Z",
            "name": "Protocol Analysis",
            "description": "An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/192.html",
                    "external_id": "CAPEC-192"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Meta",
            "x_capec_consequences": {
                "Modifying communications after successful deciphering of protocol information compromises integrity.": "Modify application data",
                "Successful deciphering of protocol information compromises the confidentiality of future sensitive communications.": "Read application data"
            },
            "x_capec_likelihood_of_attack": "Low",
            "x_capec_prerequisites": [
                "Access to a binary executable.",
                "The ability to observe and interact with a communication channel between communicating processes."
            ],
            "x_capec_typical_severity": "Low",
            "x_resources_required": "Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis."
        }
    ]
}