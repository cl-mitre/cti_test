{
    "type": "bundle",
    "id": "bundle--fd717cb5-5d80-41c1-9dce-34ebe8e5ebab",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--c8c34088-bae0-4ab2-b7e4-bd610ef9ca78",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2018-03-06T17:19:03.597Z",
            "modified": "2018-03-06T17:19:03.597Z",
            "name": "Using Escaped Slashes in Alternate Encoding",
            "description": "This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/78.html",
                    "external_id": "CAPEC-78"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/180.html",
                    "external_id": "CWE-180"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/181.html",
                    "external_id": "CWE-181"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/173.html",
                    "external_id": "CWE-173"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/171.html",
                    "external_id": "CWE-171"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/172.html",
                    "external_id": "CWE-172"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/73.html",
                    "external_id": "CWE-73"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/21.html",
                    "external_id": "CWE-21"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/22.html",
                    "external_id": "CWE-22"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html",
                    "external_id": "CWE-74"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html",
                    "external_id": "CWE-697"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/707.html",
                    "external_id": "CWE-707"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_consequences": {
                "Denial of Service": "DoS: resource consumption (memory)",
                "Run Arbitrary Code": "Execute unauthorized code or commands"
            },
            "x_capec_example_instances": [
                "For example, the byte pair \\0 might result in a single zero byte (a NULL) being sent. Another example is \\t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that \\/ results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this:\n\t/ yields /\n\t\\/ yields /",
                "Attack Example: Escaped Slashes in Alternate EncodingsAn attack leveraging this pattern is very simple. If you believe the target may be filtering the slash, attempt to supply \\/ and see what happens. Example command strings to try out include\n\tCWD ..\\/..\\/..\\/..\\/winnt\nwhich converts in many cases to\n\tCWD ../../../../winnt\nTo probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet\n\tint main(int argc, char* argv[])\n\t{\n\t}\nproduces the output\n\t/ \\ ? . |\nClearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities:\n\tCWD ..\\?\\?\\?\\?\\/..\\/..\\/..\\/winnt\n\tCWD \\.\\.\\/\\.\\.\\/\\.\\.\\/\\.\\.\\/winnt\n\tCWD ..\\|\\|\\|\\|\\/..\\/..\\/..\\/winnt"
            ],
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The application accepts the backlash character as escape character.",
                "The application server does incomplete input data decoding, filtering and validation."
            ],
            "x_capec_skills_required": {
                "The attacker can naively try backslash character and discover that the target host uses it as escape character.": "Low",
                "The attacker may need deep understanding of the host target in order to exploit the vulnerability. The attacker may also use automated tools to probe for this vulnerability.": "Medium"
            },
            "x_capec_typical_severity": "High",
            "x_resources_required": ""
        }
    ]
}