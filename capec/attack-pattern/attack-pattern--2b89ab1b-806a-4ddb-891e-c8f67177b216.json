{
    "type": "bundle",
    "id": "bundle--878db103-3be2-4d06-8f35-6f59840da1f7",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--2b89ab1b-806a-4ddb-891e-c8f67177b216",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2018-03-06T17:19:01.279Z",
            "modified": "2018-03-06T17:19:01.279Z",
            "name": "XSS Using Alternate Syntax",
            "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/199.html",
                    "external_id": "CAPEC-199"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/87.html",
                    "external_id": "CWE-87"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_consequences": {
                "Run Arbitrary Code": "Execute unauthorized code or commands"
            },
            "x_capec_example_instances": [
                "In this example, the attacker tries to get <script>alert(1)</script> executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An attacker will then create a special payload to bypass this filter:\n\t<scriscriptpt>alert(1)</scscriptript>\nwhen the applications gets this input string, it will replace all \"script\" (case insensitive) by the empty string and the resulting input will be the desired vector by the attacker:\n\t<script>alert(1)</script>\nIn this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., <script>HERE</script>). For the attacker to execute the same payload as in the previous example, he would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter\n\t((\\w+)\\s*\\(.*\\)|alert|eval|function|document)\nand replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string \"alert\" would be stripped. An attacker will then create a special payload to bypass this filter:\n\tthis['al' + 'ert'](1)\nwhen the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The attacker could also have used non-alphanumeric XSS vectors to bypass the filter; for example,\n\t($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__[_+~$]+$_[_]+$$](_/_)\nwould be executed by the JavaScript engine like alert(1) is."
            ],
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target client software must allow scripting such as JavaScript."
            ],
            "x_capec_skills_required": {
                "To inject the malicious payload in a web page": "Low",
                "To bypass non trivial filters in the application": "High"
            },
            "x_capec_typical_severity": "High",
            "x_resources_required": "Ability to send HTTP request to a web application."
        }
    ]
}